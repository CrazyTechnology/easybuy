一、三大类设计模式
1.创建型：
    工厂方法模式、抽象工厂模式、单例模式、原型模式、生成器模式
2.结构型：
    外观模式（facade）、适配器模式、装饰器模式、代理模式、桥接模式、享元模式、组合模式
3.行为型
    策略模式、模板方法模式、观察者模式、迭代模式、责任链模式、命令模式、备忘录模式、解释器模式、中介者模式
---------------------------------------------------------------------------------------------------
二、六大设计原则
1.开闭原则
    对扩展开放，对修改关闭
2.里氏代换原则
    父类出现的地方，子类一定可以出现
3.依赖倒转原则
    对抽象依赖，对具体不依赖
4.最少知道原则
    一个实体尽量少的与其他实体接触
5.接口隔离原则
    使用多个接口，避免使用单个接口
6.组合原则
    使用组合，避免使用继承
-----------------------------------------------------------------------------------
三、中介者模式介绍
1.功能
    封装对象之间的交互，把所有对象之间的交互，都封装在中介者中，可以集中的控制这些对象的交互关系。
    如果一个对象的操作会引起其他对象的变化，或者某个操作需要引起其他对象的后续或连带操作，而这个对象又不想自己来处理这些关系，就可以交给中介者对象处理
2.定义
    用一个中介对象来封装一系列的对象交互。中介者使得各个对象不需要显示地相互引用，从而使耦合松散，而且可以独立的改变他们之间的交互
3.中介者模式结构，和调用顺序示意图
http://note.youdao.com/noteshare?id=c0cf210f654aa973265b117a1c0117f2&sub=68B49241C53C40568A276B5AB55EF599



-----------------------------------------------------------------
四、深入了解
1.中介者模式的本质
    封装交互
    目的就是为了封装多个对象之间的交互，这些对象之间的交互在中介者对象中处理。中介者对象的复杂程度，取决于同事对象之间交互的复杂程度
2.优点
    松散耦合：把多个同事对象之间的交互封装到中介者对象里面，从而使得同事对象之间松散耦合，基本上做到互不依赖
    集中控制交互：多个同事之间的交互，被集中控制在中介者对象里面。使得这些交互行为发生变化时，只需要修改中介者对象
    多对多变成了一对许多：同事对象之间的关系是多对多，引入中介者之后，中介者和同事之间的关系是一对多
3.缺点
    潜在的缺点是过度的集中化，如果同事对象之间的交互非常多，而且非常复杂，会导致中介者非常复杂，难于管理和维护
4.何时选用中介者模式
    1.如果一组对象之间的通信特别复杂，导致相互依赖，结构混乱。
    2.如果一个对象引用很多对象，并直接跟他们交互，导致难以复用该对象，可以采用中介者模式。
5.中介者模式VS外观模式
    外观模式用来封装子系统中的多个模块，目的是为了向子系统外部提供简单可易用的接口。外观模式是系统内部模块之间和系统外部的交互
    中介者模式提供的是系统内部同事对象之间的调用
    外观模式实现单向的交互，是从子系统外部调用系统内部
    中介者模式是子系统内部之间多向不同的加护
6.中介者模式和观察者模式
    这两个模式可以组合使用
    观察者模式可以在同事对象发生改变的时候，通知中介对象作出处理
